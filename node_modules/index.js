const express = require('express');
const app = express();
const http = require('http').Server(app);
const io = require('socket.io')(http);
var mysql = require('mysql');
app.use(express.urlencoded());

var con = mysql.createConnection({
  host: "172.30.94.40",
  user: "root",
  database: "chat"
});

con.connect(function(err) {
    if (err) throw err;
    console.log("Connected!");
});

app.get('/', function(req, res) {
    res.render('login.ejs');
});

app.post('/', function(req, res) {
    var username = req.body.username;
    var repeated = false;

    con.query("SELECT usernames FROM active_users", function (err, result, fields) {
        if (err) throw err;
        for(var i = 0; i < result.length; i++) {
            console.log(result[i].usernames)
            if(result[i].usernames == username){
                repeated = true;
            }
        }
    });
    // callback/timeout needed to check for repeated because otherwise it can't check the db fast enough
    //check if exists in the db
    if(username){
        con.query("INSERT INTO active_users (usernames) VALUES (?)", username,
        function (err, result) {
            if (err) throw err;
            console.log('user ' + username + " inserted in the db");
        });
        // tried to use callback here instead of timeout but i can't get the backend to send data to the html after it renders
        res.render('index.ejs');
        setTimeout(function(){
            // this is too convoluted bc idk how sockets work but basically it gets the id of the last user registered and sets his username as the one he inserted
            io.sockets.connected[Object.keys(io.sockets.adapter.rooms)[Object.keys(io.sockets.adapter.rooms).length-1]].username = username;
            io.sockets.emit('is_online', '[' + now() + '] ' + 'ðŸ”µ <i>' + username + ' joined the chat.</i>');
        }, 300);
    } else {
        // return error message in case of empty field or duplicate
        
    }
});

//timestamps
function now() {
    var str = "";

    var currentTime = new Date()
    var hours = currentTime.getHours()
    var minutes = currentTime.getMinutes()
    var seconds = currentTime.getSeconds()

    if (minutes < 10) {
        minutes = "0" + minutes
    }
    if (seconds < 10) {
        seconds = "0" + seconds
    }
    str += hours + ":" + minutes + ":" + seconds + " ";
    return str;
}

io.sockets.on('connection', function(socket) {

    socket.on('disconnect', function(username) {
        io.emit('is_online', '[' + now() + '] ' + 'ðŸ”´ <i>' + socket.username + ' left the chat.</i>');
    })

    socket.on('chat_message', function(message) {

        // this code made line breaks every 250 chars for every line except the first which was capped at 236 chars

        // if(message.length>250){
        //     for(var i = 1; i < (message.length/250)+1; i++) {
        //         if(i==1){
        //             message = message.slice(0, 236) + '\n' + message.slice(236);
        //         } else{
        //             message = message.slice(0, i*250) + '\n' + message.slice(i*250);
        //         }
        //     }
        // }

        if(message.length>250){
            message = message.slice(0, 250);
        }

        io.emit('chat_message', '[' + now() + '] ' + '<strong><u>' + socket.username + '</u></strong>: ' + message);
    });

    socket.on('typing', function(hasText) {
        if(hasText){
            io.emit('typing', 'Â Â Â âœŽ<i>' + socket.username + " is typing..." + '</i>');
        } else {

            // here it should be checked whether another user was typing, if so leave their 'typing...' message, else remove

            io.emit('typing', "");
        }
    });

});

const server = http.listen(8080, function() {
    console.log('listening on *:8080');
});