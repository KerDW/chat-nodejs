const express = require('express');
const app = express();
const http = require('http').Server(app);
const io = require('socket.io')(http);


app.get('/', function(req, res) {
    res.render('index.ejs');
});

var activeUsers = [];

//timestamps
function now() {
    var str = "";

    var currentTime = new Date()
    var hours = currentTime.getHours()
    var minutes = currentTime.getMinutes()
    var seconds = currentTime.getSeconds()

    if (minutes < 10) {
        minutes = "0" + minutes
    }
    if (seconds < 10) {
        seconds = "0" + seconds
    }
    str += hours + ":" + minutes + ":" + seconds + " ";
    return str;
}

io.sockets.on('connection', function(socket) {
    socket.on('username', function(username) {
        // not catching undefined
        if(!username || username == undefined || username == null){
            username = 'anon'+(Math.floor(Math.random() * 100000) + 900000);
        } else{
            for(var i = activeUsers.length - 1; i >= 0; i--) {
                if(activeUsers[i] === username) {
                    username = 'anon'+(Math.floor(Math.random() * 100000) + 900000);
                }
            }
        }
        socket.username = username;
        io.emit('is_online', '[' + now() + '] ' + 'ðŸ”µ <i>' + socket.username + ' joined the chat.</i>');
        activeUsers.push(socket.username);
    });

    socket.on('disconnect', function(username) {
        io.emit('is_online', '[' + now() + '] ' + 'ðŸ”´ <i>' + socket.username + ' left the chat.</i>');
        for(var i = activeUsers.length - 1; i >= 0; i--) {
            if(activeUsers[i] === socket.username) {
                activeUsers.splice(i, 1);
            }
        }
    })

    socket.on('chat_message', function(message) {

        // this code made line breaks every 250 chars for every line except the first which was capped at 236 chars

        // if(message.length>250){
        //     for(var i = 1; i < (message.length/250)+1; i++) {
        //         if(i==1){
        //             message = message.slice(0, 236) + '\n' + message.slice(236);
        //         } else{
        //             message = message.slice(0, i*250) + '\n' + message.slice(i*250);
        //         }
        //     }
        // }

        if(message.length>250){
            message = message.slice(0, 250);
        }

        io.emit('chat_message', '[' + now() + '] ' + '<strong><u>' + socket.username + '</u></strong>: ' + message);
    });

    socket.on('typing', function(hasText) {
        if(hasText){
            io.emit('typing', 'Â Â Â âœŽ<i>' + socket.username + " is typing..." + '</i>');
        } else {

            // here it should be checked whether another user was typing, if so leave their 'typing...' message, else remove

            io.emit('typing', "");
        }
    });

});

const server = http.listen(8080, function() {
    console.log('listening on *:8080');
});